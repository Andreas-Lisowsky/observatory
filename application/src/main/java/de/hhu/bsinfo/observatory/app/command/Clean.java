package de.hhu.bsinfo.observatory.app.command;

import de.hhu.bsinfo.observatory.app.Application;
import java.io.File;
import java.util.concurrent.Callable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import picocli.CommandLine;

@CommandLine.Command(
        name = "clean",
        description = "Cleans up any files generated by the benchmark.%n",
        showDefaultValues = true,
        separator = " ")
public class Clean implements Callable<Void> {

    private static final Logger LOGGER = LoggerFactory.getLogger(Application.class);

    @CommandLine.Parameters(
            index = "0"
    )
    private String benchmarkName = "";

    @Override
    public Void call() throws Exception {
        if(benchmarkName.isEmpty()) {
            LOGGER.error("Please specify a benchmark name or 'all' to delete all results");
            return null;
        }

        if(benchmarkName.toLowerCase().equals("all")) {
            if (deleteDirectory(new File("result/"))) {
                LOGGER.info("Successfully delete result directory");
            } else {
                LOGGER.error("Unable to deleted result directory");
            }
        } else {
            if (deleteResults(new File("result/"), benchmarkName.toLowerCase())) {
                LOGGER.info("Successfully delete result directory");
            } else {
                LOGGER.error("Unable to delete result directory");
            }
        }

        return null;
    }

    private boolean deleteDirectory(File directory) {
        if(!directory.exists()) {
            return true;
        }

        File[] files = directory.listFiles();

        if(files != null) {
            for(File file : files) {
                if(file.isDirectory()) {
                    if(!deleteDirectory(file)) {
                        return false;
                    }
                } else {
                    if(!file.delete()) {
                        return false;
                    }
                }
            }
        }

        return directory.delete();
    }

    private boolean deleteResults(File directory, String benchmarkName) {
        if(!directory.exists()) {
            return true;
        }

        File[] files = directory.listFiles();

        if(files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    if(!deleteResults(file, benchmarkName)) {
                        return false;
                    }
                } else {
                    if (file.getName().toLowerCase().startsWith(benchmarkName.toLowerCase())) {
                        if (!file.delete()) {
                            return false;
                        }
                    }
                }
            }
        }

        return directory.delete();
    }
}
